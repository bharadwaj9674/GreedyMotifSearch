def build_profile_matrix(motifs):
    t = len(motifs)
    k = len(motifs[0])
    profile_matrix = {
        'A': [],
        'C': [],
        'G': [],
        'T': [],
        }

    for j in range(k):
        A_count = 0
        C_count = 0
        G_count = 0
        T_count = 0

        for i in range(t):
            if motifs[i][j] == 'A':
                A_count += 1
            elif motifs[i][j] == 'C':
                C_count += 1
            elif motifs[i][j] == 'G':
                G_count += 1
            else:
                T_count += 1

        profile_matrix['A'].append(A_count / t)
        profile_matrix['C'].append(C_count / t)
        profile_matrix['G'].append(G_count / t)
        profile_matrix['T'].append(T_count / t)

    return profile_matrix

def profile_most_probable_kmer(profile_matrix, text, k):
    max_probability = -9999999
    most_probable_kmer = ''

    for i in range(len(text) - k + 1):
        probability = 1
        s = text[i:i + k]

        for j in range(len(s)):
            probability = probability * profile_matrix[s[j]][j]

        if probability > max_probability:
            max_probability = probability
            most_probable_kmer = s

    return most_probable_kmer

def score(motifs):
    score = 0
    k = len(motifs[0])
    t = len(motifs)

    for j in range(k):
        A_count = 0
        C_count = 0
        G_count = 0
        T_count = 0

        for i in range(t):
            if motifs[i][j] == 'A':
                A_count += 1
            elif motifs[i][j] == 'C':
                C_count += 1
            elif motifs[i][j] == 'G':
                G_count += 1
            else:
                T_count += 1
        mx = max(A_count, max(C_count, max(G_count, T_count)))
        score += t - mx

        # no.of rows - maximum count among a, t, g, c gives you the score of a column

    return score

def greedy_motif_search(DNA, k, t):
    best_motifs = []

    for i in range(len(DNA)):
        best_motifs.append((DNA[i])[0:k])

    for i in range(len(DNA[0]) - k + 1):

        # greedy motif matrix
        motifs = [(DNA[0])[i:i + k]]

        for j in range(1, t):

            profile_matrix = build_profile_matrix(motifs)

            motif = profile_most_probable_kmer(profile_matrix, DNA[j], k)
            motifs.append(motif)

        if score(motifs) < score(best_motifs):
            best_motifs = motifs

    return best_motifs

DNA = ['TCCATGCTGGCATTGATGGGATATCTACTTCAGTGGCTTCTACAAACAAAAACTTATTTTTGCCGGGCAAGCATGTTACCTGTTTGAGTCTCGTTTAATTGACGAAGTCGTGTCGGTAAGCGCCGGCCTGTTTACCCTTCCTGATCACTAAGCAGG',
'AACGTGGCTAATAATAGCAGTTGTCACCAAAGGAGTACTGAAACTAACCACCATCTGCAACCCACAGAGCGATCTTGAAATTCATTCAGACATTTGTGTCGGGGACGCAAGCCTATTTATAATCTATAACCTTACCTCGACTCACGTCTCAGACCT',
'TCACGGGTAGGCATAGCATTCCTGTGGGTCTTTACGAAAACCCTAGCTTGAGTTCCTGGGATCAAGCCTGTGGCATGGCCTTTATTGCGACAGGAGCGAGTTTAACTAATGCGGTCTCAGCTTTAGAGAAGTGTGCCAGTTTCATCGAGCGGCAAC',
'GCGGTCAGTTGTCGTATTACGCCTCGAGGGCGTATGCGTCCTGTCAGACCATCCCTTACTTACGTATCACCCTCTCGGGTATGCTAGGCAGTGCCCTCCGGAAGTGGCCTCAAAGTTACATCGCATGATGGCAAGACTAGCTACACCTCCTTATGT',
'ATTTCGCATGCGAGCTAGTGTAGGTATCGGGAAGGCCGTTCCCGTTACTGCCACGTTAAGTAGTTAAAACAGGTTTAGTGGCCCCAGATCTACCGAAAACCAGTGCATACTTTTTTGCCCCACGGCTTTCGGCAACCGACCTTGACGCAAACCCGT',
'TATCGGGAACGCGCCCACCAATACAATAGGATCGTAGTTTGTTATATGTGGAACGCTCAGGCGGCATTGCGTAGTTACTTCTTCACAACGATCTACATAGTTCGTTGCATAAAATTGACATCGACTCATCTCCAAACAAAGACAGGACTCGGGCCC',
'ATGATGTACTTTGAAACTACGCACTTACGGGGACGCTAAACTTCGATGATGGAGTCTCTCGACGATTTTCGCGTTCGGCTAGAGCAGGAGGAATCGGATGTAGCGCTACTGCCTTCCCAAGGGATGGGTCTAGTACCTGAAAGCCAGACACTTGGG',
'CAATATGCCTAGGAGCCCGCGAGGATTCAGTTTTGCTCATCTGACGCCCCCTACGTCCGAGCCACACCATATCGGCGGAGATGTTCTAAGAACTCGAGTGCCTTAGCCTCCCCGGTGGGAATTAGGAATGTCTAACGGGCAAGCTCTTCTCGCAAC',
'TTCATTAAACGTATACGGAGCCACCCGCTTGGAACTCCTTGCTCTATAGGACAGACATGAATGCGATCAATGAGGGACTCGTATAAGACATCCATTCGTCGCGTCAGGGCCTTCATTGTCCGAGAATAGTATCTTCCACGGTCGTGCCGGGTACGC',
'CTGAGAGTCTAGTTACGGGGAAGCAGGTGGTGAAAGACGGTCTAAGATACACACAAGATCAACCGCTCGCGGCAAGAGGAGCTCCTCAGTGATGCCCGCTTCCAGCCAATCAGGAGACTCCAGTCTAGCCCGCCCCAAGTCGACAATTGTCATCTT',
'TAGTGCTAAACCCGTAATCTTTCCTCGGCAAGTGGGGCGTGCCGTGGTCATCCGGGTCCCTGTCAGGATGCGGAATGTCCGATGCGTTATCAGCCATATCGGGCAGGCTCCTTCTCTAGTGCGGTAGAATATCGGCTCGTCTTCTTGTTCATAAGT',
'GTTCGGTAACAGAACTTCGCGTTTGTGTATCGCAAGAAACCGTAGTCTTGGTGACTCACGCTGAAGGTCCTCTCCTCGCCTGGTTGAGGTTGACCCTTTGGTTGCGCCTCTTCAATTGAGGCAGTGATGAGCTCGTAATGACCATAGCGGGCAAGC',
'TGGCATACGAGCTGTCGGGCACGCATCAAATGGGCGCAGTCTAAGGGTAGCTTGGTTCTGCTGCGTTATATGATGCAGAGGGCACCACCAGATCCAAGCCGTGCGCATCCCGTGATGTAAACAGCAGCCGGAAACAGACCCAGGAAACCGGTACTA',
'TTGAAGAACCTTGGGCTTTCATCAAGTAACACAGACAGGCGAACCATTGCATCTGTCACTTATCGGGAACGCCCTGAAGGCCTGCATGTAGGGCTGCGGTCGAGAAGCTAATTTGCACTTCTAACTCTTAGTTCAGTGCTGGCCTTGCGAGCACCG',
'TTCAGCCCATGTAAAGTTATAACAGGATCTTCCCGCAACGAATGCATCGCGTTAAACACCGATGTTTTTGAACTTGTGGTCCTGGGGGCATAGGTGAAATACGGGCCCCATGCCCGCTTTTAACGGGAACGCGCACTACCCAGAATACCTACCAGA',
'GATGCCGTTCTGCAATAGGGATAGCCTTGCATGCCTTTACTGGGTGACCCGCAAGGTGATTAGACGGTCGCAACTGACTTTTCATTGCTAATCTACAGAGGCCTGCTGTATCGGGTAAGCCTATTGATATCAGGTGTCGCGGGAGCGTACTCGCTC',
'GTCCCCAGTCGATTCAAACATGAATGGAGTATAAGCTCGAACTAATCGATGAGTTATTTAAAAGTGAAGATAAATTGCGCAGTCTTTCGGGGATGCGGCGGGCCGGTTAATATCTCCACCGCGTGATGGTCCTCCAGCAAAATCGGGCAGGGCATT',
'AGTGATTGAATAACAATCTGCGTTTGAAACCGCCTCTCACGGCCGTAATGACGGGTAAGCTCAAATATCGGTCTTTGATTCCAAAACTGACACTTTGAATGACCCATGCCCCAAGGTCTAGGAATCTGCTATGCGATCAGATTACCGCGACGAGCG',
'TATCTATCCCCCAGTTACGCATGCTAAAGTGACGGTAAAAGATGGTTTAAAGCGGAAGAAAGCATACGGTGTTACCTCCGCTGGTTACGGGAAAGCTGGTATGGTTAAATTTATCCGTGCGGCTGGAGATTCGAGTCATTTCATGTTGGATGAAAT',
'GATGATGTATTGGCCCACTCCCTAGTATTGAGAGCATTGACCCAACTAGGCGTTCCAATGGGCTACTAAAACATACGTGCTCCTACACTTCATCACCCCCTCTCACGTGAGATGCTAAAGGCTAGCAGGGACTGACGGGTATGCATTTTCCAGGAG',
'TCCGACATGTGTATCTTATGCCACTGTCGGGTAGGCAGACCATTGGAGTTCCGAACCTTTACTACCAAAGCAGGCCTGACGACTCTTGCTGGGTTAGTGTGACCAAATGCCGGGGAATCCTGAACTAGTCGGCTCCCTAACGCGTCGGCGTCACCT',
'TCAGGGCGACTGGTATTTCCCTAAGTGATAGTGGGGAAAACGAGCTGAGTATCACCTTTAGGGAGACCTAGTCCGAGATAGAGCTGCCGGGTACGCGACAACTCGATTTCAGCCCTCTTTCGCTGACAGCGATAGATCAGGCCCCTAGTCTGCCAG',
'GTTGCCCATCCTACCTGAGATGTTTGAGAAGGAGACTGGCGGGGATGCCAGGTTAGTGGAGACTTGACTTAAGTGGCCTATACGCCGGGCACGCAAGCAGCCAGTTACTTTACTCCCCGGACTATATGACCTTGGTCGACGCTCAGCCGGCCGGAA',
'ATTTGTGAGAAACTGCCTCGTCGAAGCGGATTCCGGTCCCGGGTACGCAGCGCCGGAACGATTGGAGTCGACTTACCGGCGTAACAGCGCGAATGATAGACCCCAATGATCGACTCATTTCGACTTGCTGATATCCAATCGAGCCTAGTCTCCACT',
'GGTCGCTAGCCGGGAATGTCAGCCCTCAGCCAAGCAAGGCCTGTTGTTCACCAAGGTAGAGCTGATTCATTACGTCCTTTTCAATTAGGCGGACAATATCGGGCAAGCCATGCAGGAAACGTCGAGGACGTTCATGGACGCTGGTGTAGACTGATG']


best_motifs = greedy_motif_search(DNA, 12, 25)

for motif in best_motifs:
    print (motif)